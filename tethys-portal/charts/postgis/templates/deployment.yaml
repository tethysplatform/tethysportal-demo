apiVersion: apps/v1 
kind: Deployment
metadata:
  name: {{ include "postgis.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgis.name" . }}
    helm.sh/chart: {{ include "postgis.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgis.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - image: postgis/postgis:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: postgis
          args: 
            {{- range $key, $value := .Values.extra_config }}
            - "-c{{ $key | snakecase }}={{ $value }}"
            {{- end }}
          env:
            - name: POSTGRES_USER
              value: {{ .Values.postgres_user | quote }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgres_password | quote }}              
          ports:
            - name: postgis
              containerPort: 5432
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: postgis-persistent-storage
              mountPath: '/var/lib/postgresql/data'
              subPath: postgres  # Needed to prevent pg from freaking out about lost+found folder
      {{- if .Values.init_data.enabled }}
      initContainers:
        - name: init-data
          image: {{ .Values.init_data.repository }}:{{ .Values.init_data.tag }}
          imagePullPolicy: IfNotPresent
          env:
            - name: STORAGE_HOST
              value: {{ .Values.init_data.storage_host | quote }}
            - name: STORAGE_PORT
              value: {{ .Values.init_data.storage_port | quote }}
            - name: STORAGE_PATH
              value: {{ .Values.init_data.storage_path | quote }}
            - name: STORAGE_USER
              value: {{ .Values.init_data.storage_user | quote }}
            - name: STORAGE_KEY
              value: {{ .Values.init_data.storage_key | quote }}
            - name: ARCHIVE_HOST
              value: {{ .Values.init_data.archive_host | quote }}
            - name: ARCHIVE_PORT
              value: {{ .Values.init_data.archive_port | quote }}
            - name: ARCHIVE_PATH
              value: {{ .Values.init_data.archive_path | quote }}
            - name: ARCHIVE_USER
              value: {{ .Values.init_data.archive_user | quote }}
            - name: ARCHIVE_KEY
              value: {{ .Values.init_data.archive_key | quote }}
            - name: DB_HOST
              value: {{ (lookup "v1" "Service" .Release.Namespace .Release.Name).ip }}
            - name: DB_PORT
              value: {{ .Values.service.port | quote }}
            - name: DB_USER
              value: {{ .Values.postgres_user | quote }}
            - name: DB_PASS
              value: {{ .Values.postgres_password | quote }}
          volumeMounts:
            - name: postgis-persistent-storage
              mountPath: '/var/lib/postgresql/data'
              subPath: postgres
      {{- end }}
      volumes:
        - name: postgis-persistent-storage
          persistentVolumeClaim:
            claimName: {{ .Values.PersistentVolumeClaim.name }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}